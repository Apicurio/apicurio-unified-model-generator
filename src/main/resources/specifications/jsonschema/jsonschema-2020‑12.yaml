specification: JSONSchema
version: 2020-12
name: JSON Schema 2020-12
prefix: Jss202012
package: io.apicurio.datamodels.jsonschema.v202012
entities:


  - name: JsonSchema
    root: true # TODO Should we have an explicit root? What if there are multiple roots?
    includes:
      - CommonTrait
    properties:
      - name: $schema # TODO Test if these can be in a nested schema
        type: string
      - name: $id
        type: string
      - name: __rootSchema
        type: JsonSchemaNode


  - name: JsonSchemaNode # TODO Merge with Common trait?
    properties:
      - name: __owner
        type: JsonSchema
      - name: __parent
        type: JsonSchemaNode

  - name: CommonTrait
    transparent: true
    properties:
      - name: $comment
        type: string
      - name: title
        type: string
      - name: description
        type: string
      - name: default
        type: string
      - name: examples
        type: "[any]"
      - name: deprecated
        type: boolean
      - name: readOnly
        type: boolean
      - name: writeOnly
        type: boolean


  - name: ObjectSchema
    extends: JsonSchemaNode
    includes:
      - CommonTrait
      - EnumTrait
      - ConstTrait
      - AllOfTrait
      - AnyOfTrait
      - OneOfTrait
      - NotTrait
      - IfTrait
      - ThenTrait
      - ElseTrait
    properties:
      - name: properties
        type: "{JsonSchemaNode}"
      - name: patternProperties
        type: "{JsonSchemaNode}"
      - name: additionalProperties
        type: boolean|{JsonSchemaNode}
      - name: unevaluatedProperties
        type: boolean
      - name: required
        type: "[string]"
      - name: propertyNames
        type: StringSchema|EmptySchema|TrueSchema|FalseSchema
      - name: minProperties
        type: integer
      - name: maxProperties
        type: integer
      - name: dependentRequired # https://json-schema.org/understanding-json-schema/reference/conditionals.html#dependentrequired
        type: "{ObjectPropertyNames}" # TODO Or use string->[string]
      - name: dependentSchemas
        type: "{JsonSchemaNode}"
  - name: ObjectPropertyNames
    properties:
      - name: names # TODO Artificial - Should be here?
        type: "[string]"


  - name: ArraySchema
    extends: JsonSchemaNode
    includes:
      - CommonTrait
      - EnumTrait
      - ConstTrait
      - AllOfTrait
      - AnyOfTrait
      - OneOfTrait
      - NotTrait
      - IfTrait
      - ThenTrait
      - ElseTrait
    properties:
      - name: items
        type: JsonSchemaNode
      - name: prefixItems
        type: "[JsonSchemaNode]"
      - name: items
        type: JsonSchemaNode
      - name: contains
        type: JsonSchemaNode
      - name: minContains
        type: integer
      - name: maxContains
        type: integer
      - name: minItems
        type: integer
      - name: maxItems
        type: integer
      - name: uniqueItems
        type: boolean


  - name: EmptySchema
    extends: JsonSchemaNode
    includes:
      - CommonTrait
      - EnumTrait
      - ConstTrait
      - AllOfTrait
      - AnyOfTrait
      - OneOfTrait
      - NotTrait
      - IfTrait
      - ThenTrait
      - ElseTrait


  - name: TrueSchema
    extends: JsonSchemaNode


  - name: FalseSchema
    extends: JsonSchemaNode


  - name: BooleanSchema
    extends: JsonSchemaNode
    includes:
      - CommonTrait
      - EnumTrait
      - ConstTrait
      - AllOfTrait
      - AnyOfTrait
      - OneOfTrait
      - NotTrait
      - IfTrait
      - ThenTrait
      - ElseTrait

  - name: FooTrait
    properties:
      - name: foo
        type: object
        
  - name: EnumTrait # TODO: If EnumTrait is an interface, make sure it extends Foo
    includes:
      - FooTrait
    properties:
      - name: enum
        type: "[any]" # TODO Underlying-format-specific value, e.g. any json node. Use JSONNode directly?


  - name: ConstTrait
    properties:
      - name: const
        type: any # TODO Underlying-format-specific value, e.g. any json node. Use JSONNode directly?


  - name: NullSchema
    extends: JsonSchemaNode
    includes:
      - CommonTrait
      - EnumTrait
      - ConstTrait
      - AllOfTrait
      - AnyOfTrait
      - OneOfTrait
      - NotTrait
      - IfTrait
      - ThenTrait
      - ElseTrait


  - name: StringSchema
    extends: JsonSchemaNode
    includes:
      - CommonTrait
      - EnumTrait
      - ConstTrait
      - AllOfTrait
      - AnyOfTrait
      - OneOfTrait
      - NotTrait
      - IfTrait
      - ThenTrait
      - ElseTrait
    properties:
      - name: minLength
        type: integer
      - name: maxLength
        type: integer
      - name: pattern
        type: string
      - name: minLength
        type: integer
      - name: format # TODO Some schema versions provide specific options, use specific format entities?
        type: string


  - name: NumericTrait
    transparent: true
    includes:
      - CommonTrait
      - EnumTrait
      - ConstTrait
      - AllOfTrait
      - AnyOfTrait
      - OneOfTrait
      - NotTrait
      - IfTrait
      - ThenTrait
      - ElseTrait
    properties:
      - name: multipleOf
        type: integer
      - name: minimum
        type: number
      - name: exclusiveMinimum
        type: number
      - name: maximum
        type: number
      - name: exclusiveMaximum
        type: number
  - name: IntegerSchema
    extends: JsonSchemaNode
    includes:
      - NumericTrait
  - name: NumberSchema
    extends: JsonSchemaNode
    includes:
      - NumericTrait


  - name: ReferenceSchema
    extends: JsonSchemaNode
    properties:
      - name: $ref
        type: string

  # === Composite schemas:
  # When reading these into a model, they can be just partial bits of the parent schema
  # if they do not contain the "type" keyword.

  # TODO Do something about this https://json-schema.org/understanding-json-schema/reference/combining.html#factoring-schemas
  # Should we allow embedding these?
  - name: AllOfTrait
    properties:
      - name: allOf
        type: "[JsonSchemaNode]"
  - name: AnyOfTrait
    properties:
      - name: anyOf
        type: "[JsonSchemaNode]"
  - name: OneOfTrait
    properties:
      - name: oneOf
        type: "[JsonSchemaNode]"
  - name: NotTrait
    properties:
      - name: not
        type: JsonSchemaNode

  - name: IfTrait # Maybe use IfKeyword instead of IfTrait?
    properties:
      - name: if
        type: JsonSchemaNode
  - name: ThenTrait
    properties:
      - name: then
        type: JsonSchemaNode
  - name: ElseTrait
    properties:
      - name: else
        type: JsonSchemaNode
